//
// Generated file, do not edit! Created by opp_msgc 4.3 from base/messages/data/netpkt.msg.
//

#ifndef _NETPKT_M_H_
#define _NETPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "twsndef.h"
// }}



/**
 * Class generated from <tt>base/messages/data/netpkt.msg</tt> by opp_msgc.
 * <pre>
 * packet NetPkt {
 *     netaddr_t srcAddr; 
 *     netaddr_t desAddr; 
 *     bool preambleFlag = false; 
 *     int hopLimit = 64;
 *     int pktSize = 18; 
 * }
 * </pre>
 */
class NetPkt : public ::cPacket
{
  protected:
    netaddr_t srcAddr_var;
    netaddr_t desAddr_var;
    bool preambleFlag_var;
    int hopLimit_var;
    int pktSize_var;

  private:
    void copy(const NetPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetPkt&);

  public:
    NetPkt(const char *name=NULL, int kind=0);
    NetPkt(const NetPkt& other);
    virtual ~NetPkt();
    NetPkt& operator=(const NetPkt& other);
    virtual NetPkt *dup() const {return new NetPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual netaddr_t& getSrcAddr();
    virtual const netaddr_t& getSrcAddr() const {return const_cast<NetPkt*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const netaddr_t& srcAddr);
    virtual netaddr_t& getDesAddr();
    virtual const netaddr_t& getDesAddr() const {return const_cast<NetPkt*>(this)->getDesAddr();}
    virtual void setDesAddr(const netaddr_t& desAddr);
    virtual bool getPreambleFlag() const;
    virtual void setPreambleFlag(bool preambleFlag);
    virtual int getHopLimit() const;
    virtual void setHopLimit(int hopLimit);
    virtual int getPktSize() const;
    virtual void setPktSize(int pktSize);
};

inline void doPacking(cCommBuffer *b, NetPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetPkt& obj) {obj.parsimUnpack(b);}


#endif // _NETPKT_M_H_
