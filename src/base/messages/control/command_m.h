//
// Generated file, do not edit! Created by opp_msgc 4.3 from base/messages/control/command.msg.
//

#ifndef _COMMAND_M_H_
#define _COMMAND_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>base/messages/control/command.msg</tt> by opp_msgc.
 * <pre>
 * enum CmdLevel {
 *     UNKNOWN = 0;
 *     PHYS = 1;
 *     LINK = 2;
 *     NETW = 3;
 *     TRAN = 4;
 *     APPL = 5;
 * };
 * </pre>
 */
enum CmdLevel {
    UNKNOWN = 0,
    PHYS = 1,
    LINK = 2,
    NETW = 3,
    TRAN = 4,
    APPL = 5
};

/**
 * Enum generated from <tt>base/messages/control/command.msg</tt> by opp_msgc.
 * <pre>
 * enum CmdID {
 *     
 *     CMD_DATA_NOTI = 0; 
 *     CMD_DATA_FETCH = 1; 
 *     
 *     
 *     PHYCMD_PD = 2; 
 *     PHYCMD_IDLE = 3; 
 *     PHYCMD_RX = 4; 
 *     PHYCMD_TX = 5; 
 * };
 * </pre>
 */
enum CmdID {
    CMD_DATA_NOTI = 0,
    CMD_DATA_FETCH = 1,
    PHYCMD_PD = 2,
    PHYCMD_IDLE = 3,
    PHYCMD_RX = 4,
    PHYCMD_TX = 5
};

/**
 * Class generated from <tt>base/messages/control/command.msg</tt> by opp_msgc.
 * <pre>
 * message Command {
 *     
 *     
 *     
 *     int src = UNKNOWN;
 *     int des = UNKNOWN;
 *     
 *     int cmdId;
 * }
 * </pre>
 */
class Command : public ::cMessage
{
  protected:
    int src_var;
    int des_var;
    int cmdId_var;

  private:
    void copy(const Command& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Command&);

  public:
    Command(const char *name=NULL, int kind=0);
    Command(const Command& other);
    virtual ~Command();
    Command& operator=(const Command& other);
    virtual Command *dup() const {return new Command(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSrc() const;
    virtual void setSrc(int src);
    virtual int getDes() const;
    virtual void setDes(int des);
    virtual int getCmdId() const;
    virtual void setCmdId(int cmdId);
};

inline void doPacking(cCommBuffer *b, Command& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Command& obj) {obj.parsimUnpack(b);}


#endif // _COMMAND_M_H_
