//
// Generated file, do not edit! Created by opp_msgc 4.3 from messages/netemrppkt.msg.
//

#ifndef _NETEMRPPKT_M_H_
#define _NETEMRPPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "netpkt_m.h"
// }}



/**
 * Enum generated from <tt>messages/netemrppkt.msg</tt> by opp_msgc.
 * <pre>
 * enum EmrpPktType {
 *     EMRP_PAYLOAD_TO_AN = 0; 
 *     EMRP_PAYLOAD_TO_BS = 1; 
 *     EMRP_REQ_RELAY = 2; 
 *     EMRP_RELAY_INFO = 3; 
 *     EMRP_ENERGY_INFO = 4; 
 * };
 * </pre>
 */
enum EmrpPktType {
    EMRP_PAYLOAD_TO_AN = 0,
    EMRP_PAYLOAD_TO_BS = 1,
    EMRP_REQ_RELAY = 2,
    EMRP_RELAY_INFO = 3,
    EMRP_ENERGY_INFO = 4
};

/**
 * Class generated from <tt>messages/netemrppkt.msg</tt> by opp_msgc.
 * <pre>
 * packet NetEmrpPkt extends NetPkt {
 *     pktSize = 19;
 *     int pktType = EMRP_PAYLOAD_TO_AN; 
 * }
 * </pre>
 */
class NetEmrpPkt : public ::NetPkt
{
  protected:
    int pktType_var;

  private:
    void copy(const NetEmrpPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetEmrpPkt&);

  public:
    NetEmrpPkt(const char *name=NULL, int kind=0);
    NetEmrpPkt(const NetEmrpPkt& other);
    virtual ~NetEmrpPkt();
    NetEmrpPkt& operator=(const NetEmrpPkt& other);
    virtual NetEmrpPkt *dup() const {return new NetEmrpPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPktType() const;
    virtual void setPktType(int pktType);
};

inline void doPacking(cCommBuffer *b, NetEmrpPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetEmrpPkt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages/netemrppkt.msg</tt> by opp_msgc.
 * <pre>
 * packet NetEmrpRelayInfoPkt extends NetEmrpPkt {
 *     pktSize = 35;
 *     pktType = EMRP_RELAY_INFO;
 *     
 *     bool bsFlag = false; 
 *     double energy = 0; 
 *     double posX = 0; 
 *     double posY = 0; 
 *     double dBs = 0; 
 * }
 * </pre>
 */
class NetEmrpRelayInfoPkt : public ::NetEmrpPkt
{
  protected:
    bool bsFlag_var;
    double energy_var;
    double posX_var;
    double posY_var;
    double dBs_var;

  private:
    void copy(const NetEmrpRelayInfoPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetEmrpRelayInfoPkt&);

  public:
    NetEmrpRelayInfoPkt(const char *name=NULL, int kind=0);
    NetEmrpRelayInfoPkt(const NetEmrpRelayInfoPkt& other);
    virtual ~NetEmrpRelayInfoPkt();
    NetEmrpRelayInfoPkt& operator=(const NetEmrpRelayInfoPkt& other);
    virtual NetEmrpRelayInfoPkt *dup() const {return new NetEmrpRelayInfoPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getBsFlag() const;
    virtual void setBsFlag(bool bsFlag);
    virtual double getEnergy() const;
    virtual void setEnergy(double energy);
    virtual double getPosX() const;
    virtual void setPosX(double posX);
    virtual double getPosY() const;
    virtual void setPosY(double posY);
    virtual double getDBs() const;
    virtual void setDBs(double dBs);
};

inline void doPacking(cCommBuffer *b, NetEmrpRelayInfoPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetEmrpRelayInfoPkt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>messages/netemrppkt.msg</tt> by opp_msgc.
 * <pre>
 * packet NetEmrpEnergyInfoPkt extends NetEmrpPkt {
 *     pktSize = 23;
 *     pktType = EMRP_ENERGY_INFO;
 *     
 *     
 *     
 *     
 *     double remainEnergy; 
 * }
 * </pre>
 */
class NetEmrpEnergyInfoPkt : public ::NetEmrpPkt
{
  protected:
    double remainEnergy_var;

  private:
    void copy(const NetEmrpEnergyInfoPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetEmrpEnergyInfoPkt&);

  public:
    NetEmrpEnergyInfoPkt(const char *name=NULL, int kind=0);
    NetEmrpEnergyInfoPkt(const NetEmrpEnergyInfoPkt& other);
    virtual ~NetEmrpEnergyInfoPkt();
    NetEmrpEnergyInfoPkt& operator=(const NetEmrpEnergyInfoPkt& other);
    virtual NetEmrpEnergyInfoPkt *dup() const {return new NetEmrpEnergyInfoPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getRemainEnergy() const;
    virtual void setRemainEnergy(double remainEnergy);
};

inline void doPacking(cCommBuffer *b, NetEmrpEnergyInfoPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetEmrpEnergyInfoPkt& obj) {obj.parsimUnpack(b);}


#endif // _NETEMRPPKT_M_H_
