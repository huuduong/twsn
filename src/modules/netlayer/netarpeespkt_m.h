//
// Generated file, do not edit! Created by opp_msgc 4.4 from modules/netlayer/netarpeespkt.msg.
//

#ifndef _TWSN_NETARPEESPKT_M_H_
#define _TWSN_NETARPEESPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "netpkt_m.h"
// }}


namespace twsn {

/**
 * Enum generated from <tt>modules/netlayer/netarpeespkt.msg</tt> by opp_msgc.
 * <pre>
 * enum ArpeesPktType {
 *     ARPEES_PAYLOAD_TO_AN = 0; 
 *     ARPEES_PAYLOAD_TO_BS = 1; 
 *     ARPEES_RELAY_REQ = 2; 
 *     ARPEES_RELAY_INFO = 3; 
 * };
 * </pre>
 */
enum ArpeesPktType {
    ARPEES_PAYLOAD_TO_AN = 0,
    ARPEES_PAYLOAD_TO_BS = 1,
    ARPEES_RELAY_REQ = 2,
    ARPEES_RELAY_INFO = 3
};

/**
 * Class generated from <tt>modules/netlayer/netarpeespkt.msg</tt> by opp_msgc.
 * <pre>
 * packet NetArpeesPkt extends NetPkt {
 *     pktSize = 18;
 *     int pktType = ARPEES_PAYLOAD_TO_AN; 
 * }
 * </pre>
 */
class NetArpeesPkt : public ::twsn::NetPkt
{
  protected:
    int pktType_var;

  private:
    void copy(const NetArpeesPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetArpeesPkt&);

  public:
    NetArpeesPkt(const char *name=NULL, int kind=0);
    NetArpeesPkt(const NetArpeesPkt& other);
    virtual ~NetArpeesPkt();
    NetArpeesPkt& operator=(const NetArpeesPkt& other);
    virtual NetArpeesPkt *dup() const {return new NetArpeesPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPktType() const;
    virtual void setPktType(int pktType);
};

inline void doPacking(cCommBuffer *b, NetArpeesPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetArpeesPkt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>modules/netlayer/netarpeespkt.msg</tt> by opp_msgc.
 * <pre>
 * packet NetArpeesRelayInfoPkt extends NetArpeesPkt {
 *     pktSize = 34;
 *     pktType = ARPEES_RELAY_INFO;
 *     
 *     bool bsFlag = false; 
 *     double energy = 0; 
 *     double posX = 0; 
 *     double posY = 0; 
 *     double dBs = 0; 
 * }
 * </pre>
 */
class NetArpeesRelayInfoPkt : public ::twsn::NetArpeesPkt
{
  protected:
    bool bsFlag_var;
    double energy_var;
    double posX_var;
    double posY_var;
    double dBs_var;

  private:
    void copy(const NetArpeesRelayInfoPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetArpeesRelayInfoPkt&);

  public:
    NetArpeesRelayInfoPkt(const char *name=NULL, int kind=0);
    NetArpeesRelayInfoPkt(const NetArpeesRelayInfoPkt& other);
    virtual ~NetArpeesRelayInfoPkt();
    NetArpeesRelayInfoPkt& operator=(const NetArpeesRelayInfoPkt& other);
    virtual NetArpeesRelayInfoPkt *dup() const {return new NetArpeesRelayInfoPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getBsFlag() const;
    virtual void setBsFlag(bool bsFlag);
    virtual double getEnergy() const;
    virtual void setEnergy(double energy);
    virtual double getPosX() const;
    virtual void setPosX(double posX);
    virtual double getPosY() const;
    virtual void setPosY(double posY);
    virtual double getDBs() const;
    virtual void setDBs(double dBs);
};

inline void doPacking(cCommBuffer *b, NetArpeesRelayInfoPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetArpeesRelayInfoPkt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>modules/netlayer/netarpeespkt.msg</tt> by opp_msgc.
 * <pre>
 * message NetArpeesResRelayInfoTimer {
 *     netaddr_t reqAddr; 
 * }
 * </pre>
 */
class NetArpeesResRelayInfoTimer : public ::cMessage
{
  protected:
    twsn::netaddr_t reqAddr_var;

  private:
    void copy(const NetArpeesResRelayInfoTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetArpeesResRelayInfoTimer&);

  public:
    NetArpeesResRelayInfoTimer(const char *name=NULL, int kind=0);
    NetArpeesResRelayInfoTimer(const NetArpeesResRelayInfoTimer& other);
    virtual ~NetArpeesResRelayInfoTimer();
    NetArpeesResRelayInfoTimer& operator=(const NetArpeesResRelayInfoTimer& other);
    virtual NetArpeesResRelayInfoTimer *dup() const {return new NetArpeesResRelayInfoTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual twsn::netaddr_t& getReqAddr();
    virtual const twsn::netaddr_t& getReqAddr() const {return const_cast<NetArpeesResRelayInfoTimer*>(this)->getReqAddr();}
    virtual void setReqAddr(const twsn::netaddr_t& reqAddr);
};

inline void doPacking(cCommBuffer *b, NetArpeesResRelayInfoTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetArpeesResRelayInfoTimer& obj) {obj.parsimUnpack(b);}

}; // end namespace twsn

#endif // _TWSN_NETARPEESPKT_M_H_
